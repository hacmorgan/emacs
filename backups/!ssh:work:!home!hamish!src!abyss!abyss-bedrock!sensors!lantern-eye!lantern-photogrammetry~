#!/bin/bash

source $( type -p bedrock-application-util )

# TODO
# - ensure common options work
# - review with JJ:
#   - image filter from bedrock (light/dark?)
#     - push other filters to bedrock, use their names (check)
#   - nomenclature
#   - intended functionality / slight disparities between the scripts
#     - e.g. image filter is different in lantern-to-seqview-video.sh
#     - do we want chromatic correction as a global feature?
#   - input/output directory usage
#     - default: maintain strict structuring (replace datasets with processed)
#     - allow explicit output dir
#   - to-seqview extract camera-path from input-path (input-path up to camera-0)
#     - check for multiple json or mp4 files
#       - potential use: don't overwrite video? (append _1)
#   - metashape
#     - assume 'valid' (optional arg)
#     - num_images optional, default all valid (as tagged on seqview)
#     - allow specifying json and video(?)
#     - check if lantern-get images --fields can just be ,path,,path,,path, - test on lea-01
#       - allow specification of device (e.g. les, lem) when using lea
#   - allow specification of calibration file
#   - expose tolerance for matching as an option (default 0.05)
#   - expose build dense cloud as an option (default yes)
#   - expose fix calibration as an option (default no)

# - review with VV:
#   - functionality
#     - filter option: can this accept a full filter string and not just "standard, vanilla, darker"?
#       - standard-video and darker-video as options?
#       - This may have to be moved from common-options to operation specific
#     - go over the various paradigms for saving data and projects
#   - structure
#   - nomenclature:
#     x lantern-photogrammetry
#     x --fixed -> --fixed
#     x change opperation names to be more specific (metashape-from-seqview)
#       ? I'm not happy with calibration as an operation, but do-all isn't really right either
#     x --lantern-dir -> --lantern-dir
#     x --match-images-tolerance,--tolerance
#     x --metashape -> --metashape
#     x --camera-1 -> --camera=<cam>; default=camera-0
#     x --seqview-category,--seqview-bar,--bar -> --seqview-category,--bar,--seqview-bar; default=valid
#   x move to bedrock alonside lantern-get
#   x make installable
#   - more generic (just input and output)
#     x remove input altogether, stream filenames on stdin
#       ? will this be okay with images from multiple cameras in any order?
#       x change usage patterns to reflect this
#     x similarly remove output dir, write to local directory
#   ? calibration and from-seqview operations now also have a metashape_config option, but the default is stored in the operations repo
#   ? to-seqview now has a machine options
#   - (Later) discuss resize for video with VV


function usage()
{
    cat <<EOF >&2
$( bedrock-app-swiss-usage calibration to-seqview from-seqview )
EOF
    exit
}

function common-options()
{
    cat <<EOF
--filter,-f=<filter>; default=standard; cv-cat filter to be used
EOF
}

function calibration-description() { echo "generate a metashape project to the current working directory from a les/lem/lea dataset" }

function calibration-usage() { echo "ls some-log/*.ppm | abyss-photogrammetry calibration [<options>]" }

function calibration-examples() { echo "abyss-photogrammetry calibration --input-dir=/mnt/pond/datasets/abyss-internal/oat/les-02/20200429.revert/oat3" } 

function calibration-options()
{
    cat <<EOF
--darktable-config=[<cfg>]; if given, chromatic aberration correction will be performed using <cfg>
--fixed; fix calibration parameters 
--lantern-dir=<path>; default=/usr/local/etc/abyss/lantern-eye; path to lantern eye install on system
--match-images-tolerance,--tolerance=<seconds>; default=0.05; tolerance for the timestamps of two images to be considered a pair
--metashape=<path>; default=/opt/metashape-pro/metashape.sh; location of metashape.sh on the system
--no-dense-cloud; don't build dense cloud
EOF
}

function calibration-run()
{
    if [[ ! -d "$options_input_dir" ]]; then die "invalid input directory"; fi
    # construct the output folder structure - we still want to force the use of the
    # datasets/processed folder structure, but a full output dir can be provided to override this
    if [[ -n $options_output_dir ]]; then
        output_path="$options_output_dir"
    elif [[ -n $options_output_drive ]]; then
        input_after_drive=$( echo "$options_input_dir" | grep -o 'datasets.*')
        output_path="$options_output_drive"/processed/"$input_after_drive"/"$options_save_name"
    else
        output_path= =$( echo "$options_input_dir" | sed 's/datasets/processed/g' )/"$options_save_name"
    fi
    image_path="$output_path"/images
    calibration_path="$output_path"/calibration
    # match and generate images
    lantern-get match-images -i "$options_input_dir" --tolerance "$options_matching_tolerance" \
        | tee /dev/tty \
              | lantern-get images --fields ,path,,path,,path --filter "$options_filter"
}


function to-seqview-description() { echo "generate a video from a les/lem/lea dataset to be annotated on seqview" }

function to-seqview-usage() { echo "ls some-log/*.ppm | abyss-photogrammetry seqview [<options>]" } 

function to-seqview-examples()
{
    echo "abyss-photogrammetry seqview --input-dir=/mnt/pond/datasets/abyss-internal/oat/les-02/20200429.revert/oat3"
}

function to-seqview-options()
{
    cat <<EOF
--camera=<cam>; default=camera-0; which camera to generate the video from
--machine=<machine>; default=les; when used with images from a lantern-eye array, specifies which machine's images to use for the video
EOF
}

function to-seqview-run()
{
    echo
}


function from-seqview-description() { echo "generate a metashape project from a les/lem/lea dataset and annotations from seqview" }

function from-seqview-usage()
{
    echo
} 

function from-seqview-examples()
{
    echo
}

function from-seqview-options()
{
    cat <<EOF
--darktable-config=[<cfg>]; if given, chromatic aberration correction will be performed using <cfg>
--fixed; fix calibration parameters 
--lantern-dir=<path>; default=/usr/local/etc/abyss/lantern-eye; path to lantern eye install on system
--match-images-tolerance,--tolerance=<seconds>; default=0.05; tolerance for the timestamps of two images to be considered a pair
--metashape=<path>; default=/opt/metashape-pro/metashape.sh; location of metashape.sh on the system
--no-dense-cloud; don't build dense cloud
--num-images,-n=[<number>]; if given, and less than the number of images labelled by --seqview-category,--seqview-bar,--bar, only <number> of those images will be used to generate the metashape model
--seqview-category,--seqview-bar,--bar=<bar>; default=valid; name of the seqview category used to denote images that should be included in the metashape model
EOF
}

function from-seqview-run()
{
    echo
}


bedrock-app-swiss-init "$@"
bedrock-app-swiss-run "$@"
