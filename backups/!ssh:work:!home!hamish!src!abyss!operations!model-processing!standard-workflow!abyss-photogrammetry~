#!/bin/bash

source $( type -p bedrock-application-util )

# TODO
# - ensure common options work
# - review with JJ:
#   - image filter from bedrock (light/dark?)
#     - push other filters to bedrock, use their names (check)
#   - nomenclature
#   - intended functionality / slight disparities between the scripts
#     - e.g. image filter is different in lantern-to-seqview-video.sh
#     - do we want chromatic correction as a global feature?
#   - input/output directory usage
#     - default: maintain strict structuring (replace datasets with processed)
#     - allow explicit output dir
#   - to-seqview extract camera-path from input-path (input-path up to camera-0)
#     - check for multiple json or mp4 files
#       - potential use: don't overwrite video? (append _1)
#   - metashape
#     - assume 'valid' (optional arg)
#     - num_images optional, default all valid (as tagged on seqview)
#     - allow specifying json and video(?)
#     - check if lantern-get images --fields can just be ,path,,path,,path, - test on lea-01
#       - allow specification of device (e.g. les, lem) when using lea
#   - allow specification of calibration file
#   - expose tolerance for matching as an option (default 0.05)
#   - expose build dense cloud as an option (default yes)
#   - expose fix calibration as an option (default no)

# - review with VV:
#   - functionality
#     - filter option: can this accept a full filter string and not just "standard, vanilla, darker"?
#       - standard-video and darker-video as options?
#       - This may have to be moved from common-options to operation specific
#     - go over the various paradigms for saving data and projects
#   - structure


function usage()
{
    cat <<EOF >&2
$( bedrock-app-swiss-usage calibration seqview metashape )
EOF
    exit
}

function common-options()
{
    cat <<EOF
--filter,-f=<filter>; default=standard; cv-cat filter to be used
--input-dir,-i=<dir>; Directory containing 'config' folder and machine folder
--output-dir,-o=[<dir]; If specified, <dir> will be used as full output path instead of inferring from input-dir. Overrides --output-drive
--output-drive=[<drive>]; If specified, <drive>/processed/<...> will be used as the output dir, inferring <...> from --input-dir
EOF
}

function calibration-description() { echo "generate a metashape project from a les/lem/lea dataset" }

function calibration-usage() { echo "abyss-photogrammetry calibration --input-dir=<path> [<options>]" }

function calibration-examples() { echo "abyss-photogrammetry calibration --input-dir=/mnt/pond/datasets/abyss-internal/oat/les-02/20200429.revert/oat3" } 

function calibration-options()
{
    cat <<EOF
--darktable-config=[<cfg>]; if given, chromatic aberration correction will be performed using <cfg>
--fix-calibration; fix calibration parameters 
--lantern-install=<path>; default=/usr/local/etc/abyss/lantern-eye; path to lantern eye install on system
--matching-tolerance=<tolerance>; default=0.05; tolerance (in seconds) for the timestamps of two images to be considered a pair
--metashape-location=<path>; default=/opt/metashape-pro/metashape.sh; location of metashape.sh on the system
--no-dense-cloud; don't build dense cloud
--save-name=<name>; default=les.calibration; name of the folder in which the metashape project and files will be saved. This is overriden if --output-dir is given
EOF
}

function calibration-run()
{
    if [[ ! -d "$options_input_dir" ]]; then die "invalid input directory"; fi
    # construct the output folder structure - we still want to force the use of the
    # datasets/processed folder structure, but a full output dir can be provided to override this
    if [[ -n $options_output_dir ]]; then
        output_path="$options_output_dir"
    elif [[ -n $options_output_drive ]]; then
        input_after_drive=$( echo "$options_input_dir" | grep -o 'datasets.*')
        output_path="$options_output_drive"/processed/"$input_after_drive"/"$options_save_name"
    else
        output_path= =$( echo "$options_input_dir" | sed 's/datasets/processed/g' )/"$options_save_name"
    fi
    image_path="$output_path"/images
    calibration_path="$output_path"/calibration
    # match and generate images
    lantern-get match-images -i "$options_input_dir" --tolerance "$options_matching_tolerance" \
        | tee /dev/tty \
              | lantern-get images --fields ,path,,path,,path --filter "$options_filter"
}


function seqview-description() { echo "generate a video from a les/lem/lea dataset to be annotated on seqview" }

function seqview-usage() { echo "abyss-photogrammetry seqview --input-dir=<path> [<options>]" } 

function seqview-examples()
{
    echo "abyss-photogrammetry seqview --input-dir=/mnt/pond/datasets/abyss-internal/oat/les-02/20200429.revert/oat3"
}

function seqview-options()
{
    cat <<EOF
--use-camera-1; generate video from camera-1 images rather than camera-0 (not applicable for lem) 
EOF
}

function seqview-run()
{
    echo
}


function metashape-description() { echo "generate a metashape project from a les/lem/lea dataset and annotations from seqview" }

function metashape-usage()
{
    echo
} 

function metashape-examples()
{
    echo
}

function metashape-options()
{
    cat <<EOF
--darktable-config=[<cfg>]; if given, chromatic aberration correction will be performed using <cfg>
--fix-calibration; fix calibration parameters 
--lantern-install=<path>; default=/usr/local/etc/abyss/lantern-eye; path to lantern eye install on system
--matching-tolerance=<tolerance>; default=0.05; tolerance (in seconds) for the timestamps of two images to be considered a pair
--metashape-location=<path>; default=/opt/metashape-pro/metashape.sh; location of metashape.sh on the system
--no-dense-cloud; don't build dense cloud
--num-images,-n=[<number>]; if given, and less than the number of images labelled by --seqview-filter, only <number> of those images will be used to generate the metashape model
--save-name=<name>; default=les.calibration; name of the folder in which the metashape project and files will be saved. This is overriden if --output-dir is given
--seqview-filter=<filter>; default=valid; name of the seqview filter used to denote images that should be included in the metashape model
EOF
}

function metashape-run()
{
    echo
}


bedrock-app-swiss-init "$@"
bedrock-app-swiss-run "$@"
