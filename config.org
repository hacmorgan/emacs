* package management
** package archive servers
#+BEGIN_SRC  emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(setq use-package-always-pin  "melpa-stable")
(package-initialize)
#+END_SRC

** use-package
We must ensure use-package is installed every time. =eval-when-compile= helps emacs load faster.
#+BEGIN_SRC  emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
#+END_SRC


* editor & environment
** theme
We only have to run a single line, thankfully
#+BEGIN_SRC  emacs-lisp
(load-theme 'cyberpunk t)
#+END_SRC

** transparency
picom will handle inactive opacity for us, so we will just set a base opacity
#+BEGIN_SRC  emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 . 85))
(add-to-list 'default-frame-alist '(alpha . (95 . 85)))
#+END_SRC

** evil mode
*** use evil mode
#+BEGIN_SRC  emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

*** toggle modeline colour on insert/normal mode
#+BEGIN_SRC emacs-lisp
(add-hook 'evil-visual-state-entry-hook (lambda () (set-face-background 'powerline-active1 "chartreuse4")))
(add-hook 'evil-visual-state-exit-hook (lambda () (set-face-background 'powerline-active1 "SlateBlue3")))
(add-hook 'evil-insert-state-entry-hook (lambda () (set-face-background 'powerline-active1 "DarkOrange3")))
(add-hook 'evil-insert-state-exit-hook (lambda () (set-face-background 'powerline-active1 "SlateBlue3")))
#+END_SRC

** powerline
#+BEGIN_SRC  emacs-lisp
(require 'powerline)
(powerline-center-evil-theme)
#+END_SRC

** keyboard
*** make super key perform meta key role
This doesn't always work, so commenting it out in order to use super for other stuff
#+BEGIN_SRC  emacs-lisp
(setq x-super-keysym 'meta)
#+END_SRC

*** keybindings for moving between and resizing windows
#+BEGIN_SRC  emacs-lisp
;; Resize windows
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
;; Move between windows with shift
(windmove-default-keybindings) 
#+END_SRC

*** TODO switch between absolute and relative line numbers
*TODO*
#+BEGIN_SRC  emacs-lisp
  ;; (global-set-key (kbd "C-S-l r") (custom-set-variables '(display-line-numbers (quote relative))))
  ;; (global-set-key (kbd "C-S-l a") (custom-set-variables '(display-line-numbers t)))
#+END_SRC

*** revert buffer
#+BEGIN_SRC  emacs-lisp
(global-set-key (kbd "s-g r") 'revert-buffer)
#+END_SRC

** generic editor settings
*** indenting
indent-by-spaces is set using customize, so it's in init.el
#+BEGIN_SRC  emacs-lisp
(setq-default tab-width 4)
#+END_SRC

** mode specific editor settings
*** text-mode
#+BEGIN_SRC  emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)  ;; makes word wrap work in org mode
#+END_SRC

*** c-mode (c, c++, java)
#+BEGIN_SRC  emacs-lisp
  ;; set the various indentation levels
  (defun my-c-mode-hook ()
    ;; (c-set-offset 'defun-block-intro '++)
    (c-set-offset 'substatement-open '0))
    ;; (c-set-offset 'substatement '++)
    ;; (c-set-offset 'statement-block-intro '++))
  (add-hook 'c-mode-common-hook 'my-c-mode-hook)
#+END_SRC

*** octave-mode
#+BEGIN_SRC  emacs-lisp
;; Autoload octave mode on .m files
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))
#+END_SRC

*** org-mode
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)  ;; make <s TAB insert code block
(add-hook 'org-mode-hook #'toggle-word-wrap) ;; word wrap in org mode
#+END_SRC

*** sh-mode
**** fix problem where << starts a heredoc, but a 3rd < will revert to <<<
#+BEGIN_SRC emacs-lisp
(defadvice sh--maybe-here-document (around be-smart-about-it activate)
  "Do normal here doc auto insert, but if you type another chevron, revert and leave just <<<."
  (if (and (= (current-column) 1)
           (looking-back "^<")
           (looking-at "\nEOF")
           (save-excursion
             (forward-line -1)
             (end-of-line 1)
             (looking-back "<<EOF")))
      (progn (delete-region (search-backward "EOF") (search-forward "EOF" nil t 2))
             (insert "<"))
    ad-do-it))
#+END_SRC

** syntax highlighting, linting etc.
*** flycheck
note: flycheck requires linters. The list of required linters can be found [[https://www.flycheck.org/en/latest/languages.html][Here]]. Installed linters:
- hlint (Haskell)
- pylint
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

*** lsp-mode
lsp stands for language server protocol. It requires servers for each language (Haskell still experimental)
#+BEGIN_SRC emacs-lisp
(require 'lsp-mode)
;;(add-hook 'sh-mode-hook #'lsp)
(add-hook 'python-mode-hook #'lsp)
#+END_SRC

** other
*** backups
We will not allow making backups of files
#+BEGIN_SRC  emacs-lisp
(setq make-backup-files nil)
#+END_SRC
*** fix weird behaviour ssh-ing to zsh using keys
#+BEGIN_SRC  emacs-lisp
(setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
#+END_SRC
*** replace audible ding with visual
the ding on the ThinkPad P14s is very loud, we will use a visual indicator instead
#+begin_src emacs-lisp
(setq visible-bell 1)
#+end_src

* terminal
*** fix tab unresponsiveness in org mode
#+BEGIN_SRC  emacs-lisp
(add-hook 'org-mode-hook                                                                      
  (lambda ()                                                                          
    (define-key evil-normal-state-map (kbd "TAB") 'org-cycle))) 
#+END_SRC
*** make cursor change shape on insert mode
#+BEGIN_SRC  emacs-lisp
(add-hook 'evil-insert-state-entry-hook 
  (lambda () 
    (if (display-graphic-p) nil 
      (send-string-to-terminal "\033[5 q"))))
(add-hook 'evil-normal-state-entry-hook (lambda () (if (display-graphic-p) nil (send-string-to-terminal "\033[0 q"))))
#+END_SRC


* emacs server
#+BEGIN_SRC  emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+END_SRC


* multimedia
** emms
#+BEGIN_SRC  emacs-lisp
(use-package emms
  :ensure t
  :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
    (setq emms-seek-seconds 5)
    (setq emms-player-list '(emms-player-mpd))
    (setq emms-info-functions '(emms-info-mpd))
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6600")
    (setq emms-add-directory-tree "/mnt/storage/Music")
  :bind
    ("M-p p" . emms)
    ("M-p b" . emms-smart-browse)
    ("M-p r" . emms-player-mpd-update-all-reset-cache)
    ("<XF86AudioPrev>" . emms-previous)
    ("<XF86AudioNext>" . emms-next)
    ("<XF86AudioPlay>" . emms-pause)
    ("<XF86AudioStop>" . emms-stop))
#+END_SRC

** livecoding
*** supercolider 
#+BEGIN_SRC emacs-lisp
;;  (require 'sclang)
;;  (require 'w3m)
#+END_SRC
