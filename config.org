* package management
** package archive servers
#+BEGIN_SRC  emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)  ;; used to be required for org mode
  (setq use-package-always-pin  "melpa-stable")
  ;; (package-initialize)
#+END_SRC
** use-package
We must ensure use-package is installed every time. =eval-when-compile= helps emacs load faster.
#+BEGIN_SRC  emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
#+END_SRC
** external packages
Any packes not obtainable from {,m}elpa we put in ~/.emacs.d/external-packages
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/external-packages/doxymacs")
#+end_src
* editor & environment
** theme
We only have to run a single line, thankfully
#+BEGIN_SRC  emacs-lisp
(load-theme 'cyberpunk t)
#+END_SRC

** transparency
picom will handle inactive opacity for us, so we will just set a base opacity
#+BEGIN_SRC  emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(95 . 85))
(add-to-list 'default-frame-alist '(alpha . (95 . 85)))
#+END_SRC

** evil mode (vim layer)
*** use evil mode
#+BEGIN_SRC  emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

*** unbind/rebind evil keybindings
We want to replace the emacs builtin C-f keybinding and evil's redefintion of it, so we can use it for iedit mode
#+BEGIN_SRC  emacs-lisp
(global-unset-key (kbd "C-f"))
(define-key evil-normal-state-map (kbd "C-f") 'iedit-mode)
#+END_SRC

*** toggle modeline colour on insert/normal mode
#+BEGIN_SRC emacs-lisp
(add-hook 'evil-visual-state-entry-hook (lambda () (set-face-background 'powerline-active1 "chartreuse4")))
(add-hook 'evil-visual-state-exit-hook (lambda () (set-face-background 'powerline-active1 "SlateBlue3")))
(add-hook 'evil-insert-state-entry-hook (lambda () (set-face-background 'powerline-active1 "DarkOrange3")))
(add-hook 'evil-insert-state-exit-hook (lambda () (set-face-background 'powerline-active1 "SlateBlue3")))
(add-hook 'evil-emacs-state-entry-hook (lambda () (set-face-background 'powerline-active1 "color-124")))
(add-hook 'evil-emacs-state-exit-hook (lambda () (set-face-background 'powerline-active1 "SlateBlue3")))
#+END_SRC

** powerline
#+BEGIN_SRC  emacs-lisp
(require 'powerline)
(powerline-center-evil-theme)
#+END_SRC

** arduino mode
*** Disable irony mode
Irony is incompatible with arduino files (for now at least)
#+begin_src emacs-lisp
(add-hook 'arduino-mode-hook (lambda () (irony-mode 0)))
#+end_src

** keyboard
*** make super key perform meta key role
This doesn't always work, so commenting it out in order to use super for other stuff
#+BEGIN_SRC  emacs-lisp
(setq x-super-keysym 'meta)
#+END_SRC

*** keybindings for moving between and resizing windows
#+BEGIN_SRC  emacs-lisp
;; Resize windows
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
;; Move between windows with shift
(windmove-default-keybindings)
;; Move between windows with C-x <arrows> (for terminals with tmux)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <up>") 'windmove-up)
;; Move between windows with C-x <vim-keys> (for terminals with tmux)
(global-set-key (kbd "C-x h") 'windmove-left)
(global-set-key (kbd "C-x l") 'windmove-right)
(global-set-key (kbd "C-x j") 'windmove-down)
(global-set-key (kbd "C-x k") 'windmove-up)
;; Resize windows with C-x S-<arrows> (for terminals with tmux)
(global-set-key (kbd "C-x r <left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-x r <right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-x r <down>") 'shrink-window)
(global-set-key (kbd "C-x r <up>") 'enlarge-window)
#+end_src

*** switch between absolute and relative line numbers, disable line numbers
To set keybindings (using =global-set-key=), the functions called must be interactive. We define the functions and then set keybindings for them.
#+BEGIN_SRC  emacs-lisp
  (defun use-relative-numbers ()
    "Switch to using relative numbers (as opposed to absolute)"
    (interactive)
    (setq display-line-numbers 'relative))
  (defun use-absolute-numbers ()
    "Switch to using absolute numbers (as opposed to relative)"
    (interactive)
    (setq display-line-numbers t))
  ;;   (custom-set-variables '(display-line-numbers t)))
  ;; ;
                                          ; (defun disable-line-numbers ()
  ;;   "Switch to using absolute numbers (as opposed to relative)"
  ;;   (interactive)
  ;;   (display-line-numbers-mode)
  (defun disable-line-numbers ()
    "Disable line numbers (as opposed to relative)"
    (interactive)
    (display-line-numbers-mode -1))
  (defun enable-line-numbers ()
    "Disable line numbers (as opposed to relative)"
    (interactive)
    (progn
    (display-line-numbers-mode 1)
    (use-relative-numbers)))

  (global-set-key (kbd "C-x n r") 'use-relative-numbers)
  (global-set-key (kbd "C-x n a") 'use-absolute-numbers)
  (global-set-key (kbd "C-x n d") 'disable-line-numbers)
  (global-set-key (kbd "C-x n RET") 'enable-line-numbers)
#+END_SRC

*** revert buffer
#+BEGIN_SRC  emacs-lisp
(global-set-key (kbd "s-g r") 'revert-buffer)
#+END_SRC

*** <select> is end (also helpful for terminal)
#+begin_src emacs-lisp
(global-set-key (kbd "<select>") 'end-of-line)
#+end_src

*** comment-line hotkey (for terminal)
Emacs in a terminal interprets "C-x C-;" as "C-x ;", so we will bind that also to comment-line
#+begin_src emacs-lisp
(global-set-key (kbd "C-x ;") 'comment-line)
(global-set-key (kbd "C-c ,") 'org-insert-structure-template)
#+end_src
*** map f12 to match VSCode
#+begin_src emacs-lisp
(global-set-key (kbd "<f12>") 'lsp-find-definition)
#+end_src
** generic editor settings
*** indenting
indent-by-spaces is set using customize, so it's in init.el
#+BEGIN_SRC  emacs-lisp
(setq-default tab-width 4)
#+END_SRC

*** ~which-key~ mode
If you wait for 1 second after typing an icomplete command, you are shown all possible completions
#+BEGIN_SRC  emacs-lisp
(which-key-mode)
#+END_SRC

*** fill column indicator (88 char line)
Automatically enable the fill column indicator at 88 chars for all dev modes, assign C-x f to toggle it
#+BEGIN_SRC  emacs-lisp
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
;; (add-hook 'python-mode-hook '(set-fill-column 88))
;;'(display-fill-column-indicator-column 88)
(global-set-key (kbd "C-x f") 'display-fill-column-indicator-mode)
#+END_SRC

** mode specific editor settings
*** text-mode
#+BEGIN_SRC  emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)  ;; makes word wrap work in org mode
#+END_SRC

*** c-mode (C, C++, java)
#+BEGIN_SRC  emacs-lisp
  ;; set the various indentation levels
  (defun my-c-mode-hook ()
    ;; (c-set-offset 'defun-block-intro '++)
    (c-set-offset 'substatement-open '0))
    ;; (c-set-offset 'substatement '++)
    ;; (c-set-offset 'statement-block-intro '++))
  (add-hook 'c-mode-common-hook 'my-c-mode-hook)
#+END_SRC

*** octave-mode
#+BEGIN_SRC  emacs-lisp
;; Autoload octave mode on .m files
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))
#+END_SRC

*** org-mode
#+BEGIN_SRC emacs-lisp
(require 'org-tempo)  ;; make <s TAB insert code block
;;(add-hook 'org-mode-hook #'toggle-word-wrap) ;; word wrap in org mode
;; turned this off because it was cutting words in half
#+END_SRC

*** sh-mode
**** fix problem where << starts a heredoc, but a 3rd < will revert to <<<
#+BEGIN_SRC emacs-lisp
(defadvice sh--maybe-here-document (around be-smart-about-it activate)
  "Do normal here doc auto insert, but if you type another chevron, revert and leave just <<<."
  (if (and (= (current-column) 1)
           (looking-back "^<")
           (looking-at "\nEOF")
           (save-excursion
             (forward-line -1)
             (end-of-line 1)
             (looking-back "<<EOF")))
      (progn (delete-region (search-backward "EOF") (search-forward "EOF" nil t 2))
             (insert "<"))
    ad-do-it))
#+END_SRC
** syntax highlighting, linting etc.
Because emacs is emacs, getting syntax highlighting, linting, etc working correctly is a matter of getting many packages to work together.

Some pip packages are necessary (though they /should/ be installed by =sysbs=)

*** flycheck
Flycheck is the module which provides squiggly underlines/highlighted text and tooltip/modeline explanations for ~lsp-mode~

note: flycheck requires linters. The list of required linters can be found [[https://www.flycheck.org/en/latest/languages.html][Here]]. Installed linters:
- hlint (Haskell)
- pylint
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

**** Set flycheck backend to pylint (not lsp)
This way we get the detection of invalid syntax from pylint, as well as all the nice lsp jedi stuff
#+begin_src emacs-lisp
  (setq lsp-diagnostic-package :none)
#+end_src

*** lsp-mode
lsp stands for /language server protocol/. the ~lsp-mode~ module combines numerous emacs UI modules together with one or more language servers to provide an IDE experience
#+BEGIN_SRC emacs-lisp
(require 'lsp-mode)
;;(add-hook 'sh-mode-hook #'lsp)
(add-hook 'python-mode-hook #'lsp)
#+END_SRC
**** lsp-jedi
Jedi is probably python's
#+BEGIN_SRC emacs-lisp
  (use-package lsp-jedi
    :ensure t
    :config
    (with-eval-after-load "lsp-mode"
      (add-to-list 'lsp-disabled-clients 'pyls)
      ;; (add-to-list 'lsp-disabled-clients 'pylsp)
      (add-to-list 'lsp-enabled-clients 'pylsp)
      (add-to-list 'lsp-enabled-clients 'jedi)))
#+END_SRC

**** lsp-ui
~lsp-ui~ combines UI elements into one package

TODO: determine if this removes the need for flycheck to be separately installed?
#+begin_src emacs-lisp
(use-package lsp-ui)
#+end_src

**** lsp-treemacs
~lsp-treemacs~ integrates ~treemacs~ (vscode-like tree structure for files) with lsp-mode

This seems to mean that treemacs only shows files that ~lsp~ is tracking
#+begin_src emacs-lisp
(lsp-treemacs-sync-mode 1)
#+end_src

**** lsp performance
Run the =lsp-doctor= command to see what can be done to improve performance. This one can't just be configured in customize.
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

*** irony-mode
Turn on irony mode for C, C++, Objective C
#+begin_src emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+end_src

Add company-irony to company backends
#+begin_src emacs-lisp
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))
#+end_src
*** clang-format
Call clang-format whenever indenting
#+begin_src emacs-lisp
  ;; (fset 'c-indent-region 'clang-format-region)
#+end_src

Keybindings for clang-format{,-region}
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-\\") 'clang-format-region)
  (global-set-key (kbd "C-M-|")  'clang-format-buffer)
#+end_src
*** company-mode
**** company-jedi (python)
#+begin_src emacs-lisp
(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)
#+end_src
*** blacken
Automatically run black on python scripts when saving
#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'blacken-mode)
#+end_src
*** tree-sitter
Tree-sitter is a package that aims to provide better syntax highlighting via syntax trees
#+begin_src emacs-lisp
(require 'tree-sitter)
(require 'tree-sitter-langs)
;; enable globally for all supported modes
(global-tree-sitter-mode)
;; turn on tree-sitter syntax highlighting for python files
(add-hook 'python-mode-hook #'tree-sitter-hl-mode)
#+end_src
** treemacs
Treemacs adds VScode-like tree-structure folders to Emacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs)

  ;; always use treemacs (TODO: determine if this is a shit idea)
  ;; (treemacs)
  ;; (add-hook 'python-mode-hook #'treemacs)
  ;; (add-hook 'after-init-hook
  ;;   (lambda ()
  ;;     (split-window-horizontally)
  ;;     (treemacs)))

  ;; Make quick keybind for treemacs
  (global-set-key (kbd "C-x T") 'treemacs)

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  ;; (use-package treemacs-projectile
  ;;   :after (treemacs projectile)
  ;;   :ensure t)

  ;; (use-package treemacs-icons-dired
  ;;   :hook (dired-mode . treemacs-icons-dired-enable-once)
  ;;   :ensure t)

  ;; (use-package treemacs-magit
  ;;   :after (treemacs magit)
  ;;   :ensure t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Tabs)
  ;;	)
#+END_SRC

** yasnippet
For the google style python docstring, we need GitHub user Xaldew's package repository
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("xaldew" . "https://gustafwaldemarson.com/elpa/"))
(add-to-list 'package-unsigned-archives "xaldew")
;; (package-initialize)
#+end_src
** doxygen
*** Make sure we're using doxymacs
#+begin_src emacs-lisp
(require 'doxymacs)
#+end_src
*** Use doxymacs mode on all C/C++
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook 'doxymacs-mode)
#+end_src
*** Always fontify
#+begin_src emacs-lisp
(defun my-doxymacs-font-lock-hook ()
(if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
(doxymacs-font-lock)))
(add-hook 'font-lock-mode-hook 'my-doxymacs-font-lock-hook)
#+end_src
** ein
*** Enable undo
For some reson, undo is disabled somewhere outside of customize. We will see if this helps.
#+begin_src emacs-lisp
(custom-set-variables '(ein:worksheet-enable-undo t))
#+end_src
** copilot
Enable copilot
#+begin_src emacs-lisp
  (add-to-list 'load-path "/home/hamish/.emacs.d/external-packages/copilot.el")
  (require 'copilot)
  (add-hook 'prog-mode-hook 'copilot-mode)
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
#+end_src
** other
*** backups
We will not allow making backups of files
#+BEGIN_SRC  emacs-lisp
(setq make-backup-files nil)
#+END_SRC
*** fix weird behaviour ssh-ing to zsh using keys
#+BEGIN_SRC  emacs-lisp
(setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
#+END_SRC
*** replace audible ding with visual
the ding on the ThinkPad P14s is very loud, we will use a visual indicator instead
#+begin_src emacs-lisp
(setq visible-bell 1)
#+end_src

* terminal
*** fix tab unresponsiveness in org mode
#+BEGIN_SRC  emacs-lisp
(add-hook 'org-mode-hook                                                                      
  (lambda ()                                                                          
    (define-key evil-normal-state-map (kbd "TAB") 'org-cycle))) 
#+END_SRC
*** make cursor change shape on insert mode
#+BEGIN_SRC  emacs-lisp
(add-hook 'evil-insert-state-entry-hook 
  (lambda () 
    (if (display-graphic-p) nil 
      (send-string-to-terminal "\033[5 q"))))
(add-hook 'evil-normal-state-entry-hook (lambda () (if (display-graphic-p) nil (send-string-to-terminal "\033[0 q"))))
#+END_SRC
*** fix broken keybindings
In a terminal, emacs receives "C-;" and "C-," (likely among others) without the ctrl prefix, so we overwrite some other keybindings that we don't need.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x ;") 'comment-line)
(global-set-key (kbd "C-x ,") 'org-insert-structure-template)
(global-set-key (kbd "C-c f") 'lsp-find-definition)
#+end_src
* emacs server
#+BEGIN_SRC  emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+END_SRC

* multimedia
** emms
#+BEGIN_SRC  emacs-lisp
(use-package emms
  :ensure t
  :config
    (require 'emms-setup)
    (require 'emms-player-mpd)
    (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
    (setq emms-seek-seconds 5)
    (setq emms-player-list '(emms-player-mpd))
    (setq emms-info-functions '(emms-info-mpd))
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6600")
    (setq emms-add-directory-tree "/mnt/storage/Music")
  :bind
    ("M-p p" . emms)
    ("M-p b" . emms-smart-browse)
    ("M-p r" . emms-player-mpd-update-all-reset-cache)
    ("<XF86AudioPrev>" . emms-previous)
    ("<XF86AudioNext>" . emms-next)
    ("<XF86AudioPlay>" . emms-pause)
    ("<XF86AudioStop>" . emms-stop))
#+END_SRC

** livecoding
*** supercolider 
#+BEGIN_SRC emacs-lisp
;;  (require 'sclang)
;;  (require 'w3m)
#+END_SRC
